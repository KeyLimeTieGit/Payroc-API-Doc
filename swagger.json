{
  "swagger": "2.0",
  "schemes": [
    "https"
  ],
  "host": "emv.payroc.com",
  "basePath": "/services/api.asmx/",
  "info": {
    "description": "# Introduction\nIn order to start testing, please [contact](mailto:integrations@payroc.com) us to obtain a reseller id.  Once you have the reseller id you would first call the **pairTerminal()** method of the api which will return an API Key/Pwd and terminalID which you would store on your end. You would then use those credentials with the runTransaction method to run a sale. Please be sure to read the area in red on the pairing page as it describes the importance of the referenceID when calling the pairTerminal method. \n\nAll commands require a key, pwd and terminalID parameter which is obtained from the pairTerminal method\n# Best Practices\nFrom experience, the following testing cases should be performed to address different payment scenarios.\n\nThe Blackline eConduit platform removes integrators from PCI PA-DSS scope and EMV certifications, it is not required although recommended to ensure a smooth experience for all clients.\n\n\n| Item | Recommendation | Reference in documentation |\n|-----|-----|-------|\n| Payment Window  | It is important that you do not allow users to close the payment window. If a transaction needs to be cancelled, it must be initiated on the terminal itself. If a transaction is sent and the payment window is closed, the transaction is still showing on the terminal and a customer will typically complete it. Depending on the implementation, this can cause the result to be lost in the POS. Typically a cashier will then run a second transaction which is now a duplicate payment.   | [Check Status](#tag/Endpoints%2Fpaths%2F~1checkStatus%2Fget) |\n| ResellerName | Prior to going live, ensure your ResellerName is provided to eConduit and added to the boarding request | [Pair Terminal](#operation/pairTerminal) |\n| Partial Authorizations | Although an amount can be submitted for payment, an approval less than the actual amount can be approved.<br/><br/>Ensure your integration can accept approval for the full amount of less than the full amount requiring a second payment command | [Transaction Results](#section/Transaction-Results) |\n| Single device and multiple cash registers | When pairing devices to cash registers, it is recommended to pair one cash register to one device. Pairing multiple registers to a single device is allowed although it is recommended a second command is held until the device is free. Creating a backlog of commands to the device can create confusion. | &nbsp; |\n| Client Boarding/Pairing | Pairing the device to your POS should be automated (not manual)<br/><br/>Also, the client information should be passed during the boarding process, not hard coded fields – it improves support by being able to pull up records by business name | [Pair Terminal](#operation/pairTerminal) |\n| Transaction Error – Reference ID | If loss of connection, the use of CheckStatus should be used. CheckStatus will initiate a search in the device for the results.<br/><br/>It is recommended that the same transaction and amount is not allowed a 2nd time prior to initiating a CheckStatus. | You should keep calling the checkStatus until the resultFinal field is true. Please see the checkStatus area in red.<br/>[Check Status](#tag/Endpoints%2Fpaths%2F~1checkStatus%2Fget) |\n| UnpairTerminal | If the need to unPairTerminals is common for support purposes, consider implementing the unPairTerminal command, it will allow you to remove pairing of devices to registers | [Unpair Terminal](#tag/Endpoints%2Fpaths%2F~1unpairTerminal%2Fget) |\n\n# Testing Recommendations\n\nThe following are recommended test cases to complete before going live.\n\n| Command | Type |\n|-----|-----|\n| Sale | swiped |\n| Sale | Keyed |\n| Sale | NFC (Apple Pay) |\n| Sale | EMV (EMV gift cards needed) |\n| Refund | Swiped |\n| Refund | Keyed |\n| Refund | NFC |\n| Refund | EMV |\n| Cancellation | Cancellation of transaction at credit card terminal |\n| Void | Void a transaction still in the device |\n| Tip Adjustment (restaurant application required) | Ability to adjust tips after the sale |\n| GetSwipe (optional) | Command to allow you to grab non-sensitive data from the device |\n| CheckStatus | Perform a checkStatus command to obtain the results of a previous transaction |\n\n# Receipt Formatting Recommendations\nThe following are receipt formatting recommendations for standard payments and EMV payments.\n\n##  Magnetic Stripe Recommendations\n* Payment type (card brand)\n\n  * Last four digits of card\n  * Transaction type (sale, refund, etc.)\n  * Remove expiration date or truncate\n  * Entry mode (keyed, swiped)\n  * Approval code\n  * Transaction amount\n  * Card issues agreement language\n  * Refund policy near signature line\n  * Signature line\n  * Cardholder name as it appears in track data (requirement for Discover)\n\n    ![alt sample](http://econduit.cloud/wp-content/uploads/2018/04/receipt-MagSwipe.png)\n\n## EMV Receipt Recommendations\n\n* Transaction type (sale, refund, etc.)\n\n  * Last four digits of the card\n  * Application Preferred Name or Application Label\n  * Application Identifier (AID)\n  * Application Cryptogram type (ARQC or TC)\n  * Application Cryptogram\n  * Terminal Verification Result (TVR) if available\n  * Transaction Status Information (TSI) if available\n  * Application Transaction Counter (ATC) if available\n  * Authorization Response Code (ARC) if available\n  * Approval Code\n  * Transaction amount\n  * Card issuer agreement language, if applicable\n  * Refund policy near signature line, if applicable\n  * Card Verification method (signature line, pin verified, or no signature required)\n  * Cardholder name as it appears in track data\n  \n  ![alt sample](http://econduit.cloud/wp-content/uploads/2018/04/receipt-EMV.png)\n  \n# Transaction Results\nThe transaction results will be returned in a JSON string.\n\n| Field | Description |\n| --- | --- |\n| TerminalId | Echo back original TerminalID provided |\n| ResultCode | \"Approved”, \"Declined\",\"Error\",\"Connection Timeout\",\"Terminal Busy\",\"Cancelled\" If using the getSwipe command, “Success” will be returned. |\n| ResultFinal | Indicates if the result is the end result or not.In cases of comm failures, this will be false, normally it will be true |\n| AuthCode | Authorization code provided by authorization network |\n| TransType | Sale,Refund,Void etc |\n| Amount | Amount Paid, could be less than what was requested (decimal) |\n| AmountString | Amount Paid , could be less than what was requested (string) |\n| CardType | “Visa”, ”MasterCard”, ”Discover”, ”Amex”, ”JCB”, ”DinersClub”, ”enRoute”, ”Interac”, ”Flash”, ”Debit”, ”GiftCard”, ”EBT”, ”LevelUp”, ”Voyager”, ”Wex”, ”Other” |\n| Last4 | The last 4 digits of the card number |\n| Name | Name on the credit card |\n| CashBack | Cash back amount (decimal) |\n| CashBackString | Cash back amount (string) |\n| Message | Any error message returned from the terminal. |\n| RefID | Echo back original RefID if one is provided, otherwise one is created. If a tip adjustment or void is required, this value must be saved and passed in the tip adjustment command. |\n| receiptTerminal | \tIf the terminal supports sending the receipt in the response, the receipt will be provided here. This data can include carriage returns and line feeds. |\n| CardToken | Supported on Vantiv using Dejavoo. On Pax, TSYS and RapidConnect. |\n| GiftCardBalance | The balance remaining on the gift card (decimal) |\n| GiftCardBalanceString | The balance remaining on the gift card (string) |\n| ProcessorExtraData1 | This field will vary depending on the processor. For Mercury, this will have the AcqRefData |\n| ProcessorExtraData2 | This field will vary depending on the processor. For Mercury, this will have the ProcessData |\n| ProcessorExtraData3 | This field will vary depending on the processor. For Mercury, this will have the Refno |\n| SignatureData | If the device supports signature capture, this field will be populated with a base64 string that contains a png file. |\n| EMV_TC | EMV Transaction Certificate |\n| EMV_TVR | EMV Terminal Verification Results |\n| EMV_AID | EMV Application Identifier |\n| EMV_TSI | EMV Transaction Status Information |\n| EMV_ATC | EMV Application Transaction Counter |\n| EMV_App_Label | EMV Application Label |\n| EMV_App_Name | \tEMV Application Name |\n| EMV_CVM | EMV CVM – Integer response value<br/>-1 Undefined (not part of the terminal response)<br/>0 No CVM<br/>1 Verified by PIN<br/>2 Signature Required<br/>3 PIN and Signature Required<br/>4 Failed\n| EMV_ARC | \tEMV Authorization Response Code |\n| CardBin | Card bin number, first 6 digits of the card |\n| EntryMethod | Manual, Swipe, Contactless, Scanner, Chip, ChipFallbackSwipe |\n| TransactionDate | local transaction time (central US), ISO 8601 format. Example 2016-08-25T15:28:11-05:00 |\n| TransactionDateUtc | UTC tranaction date, ISO 8601 format. Example 2016-08-25T20:28:11Z |\n| ExpDate | \tIf the expiration date is available, it will be returned. Format = MMYY, i.e. January 2017 would be 0117 |\n| GiftPAN | On gift card transactions, if the full gift card number is available, it will be returned. |\n\n**JSON Response**\n\n```\n{\n  \"TerminalID\": \"1234\",\n  \"ResultCode\": \"Approved\",\n  \"AuthCode\": \"abc1234\",\n  \"TransType\": \"Sale\",\n  \"Amount\": 2.50,\n  \"AmountString\":\"2.50\",\n  \"CardType\": \"Visa\",\n  \"Last4\": \"0026\",\n  \"Name\": \"John Doe\",\n  \"CashBack\": 0.00,\n  \"CashBackString\": \"0.00\",\n  \"Message\": \"This is a sample message\",\n  \"RefID\": \"ee0252f6-38bf-4c3f-97d4-a3ecf87cf69b\",\n  \"CardToken\":\"ASDF2134-AHRCW+FSD123123-NKODS\",\n  \"GiftCardBalance\":23.75,\n  \"GiftCardBalanceString\":\"23.75\",\n  \"ProcessorExtraData1\":\"KaNb015170105002706cAAFEd5e00fJlA m000005\",\n  \"ProcessorExtraData2\":\"|17|210100700000\",\n  \"ProcessorExtraData3\":\"0058\",\n  \"SignatureData\":\"iVBORw0KGgoAAAANSUhEUgAAAI4AAAQmCC=\",\n  \"Track1\": null,\n  \"Track2\": null,\n  \"EMV_TC\": \"B9AB420B0937438F\",\n  \"EMV_TVR\": \"0800008000\",\n  \"EMV_AID\": \"A0000000031010\",\n  \"EMV_TSI\": \"F800\",\n  \"EMV_ATC\": \"0016\",\n  \"EMV_App_Label\": \"Visa Credit\",\n  \"EMV_App_Name\": \"Visa Credit\",\n  \"CardBin\": \"476173\",\n  \"ExpDate\":\"0117\",\n  \"EntryMethod\": \"Chip\",\n  \"receiptTerminal\":\"Blackline Partners\n\n    Client ID:  13318900010001\n    Cashier ID: \n    Lane:                            Store: \n     \n    05/01/2015                      16:56:25\n     \n                      SALE\n                    Invoice: 78\n     \n    Account:  VISA 401200******0026\n    Cardholder:  TEST CARD   /VISA\n    Result:  CAPTURED\n    Authorization Code:  000271\n}\n```\n",
    "version": "1.0.0",
    "title": "Point of Sale - REST API",
    "termsOfService": "https://www.payroc.com/privacy-policy",
    "contact": {
      "email": "integrations@payroc.com",
      "url": "https://www.payroc.com/contact-us"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://s3-us-west-2.amazonaws.com/payroc-production/Public/payroc-logo-outlines.svg"
    }
  },
  "produces": [
    "application/json"
  ],
  "consumes": [
    "application/json"
  ],
  "paths": {
    "/pairTerminal": {
      "get": {
        "tags": [
          "Endpoints"
        ],
        "summary": "pairTerminal",
        "description": "The pairTerminal method will return the APIkey, APIpwd and TerminalID that needs to be stored for later use when running a transaction.\n\nYour resellerName will be provided to you. The ReferenceID is a unique id that references the client on your end. If a client has multiple locations and you pass the same ReferenceID to us for all of them, we will link their terminals together. This makes it easy for customers to move terminals between their stores if needed.\n\nThe api will return a Success or Error status response. If it’s a Success, you would store the api key, pwd and terminal id with the register and use those credentials to make transaction calls.\n\nThe pairTerminalWithCountry method has one additional field \"Country\". If you know the country of the client, please use this method. Valid values are \"USA\",\"Canada\",\"UK\",\"Australia\",\"New Zealand\" \n\nReferenceID\n\nThe ReferenceID is a unique id that references the client/merchant/organization on your end. If a client has multiple devices and you pass the same ReferenceID for all of them, we will link their terminals together. The first time a client is directed to this page, they will be asked to confirm their contact information, once added to our system this page is no longer shown and we proceed to the terminal pairing process\n\nExample \n\nIf a client is boarded and they have 5 credit card terminals, and the same ReferenceID is provided, we will return the same ApiKey and ApiPassword for all 5 devices, the ReferenceID will be the same for all devices although the TerminalID will be unique for each device.\n\nOn the next boarding request a new ReferenceID should be provided for an new entity/business/organization and we will return a unique ApiKey, ApiPassword and TerminalID related to this ReferenceID.\n\n* It is NOT recommended or allowed to pass the same ReferenceID for all boarded accounts.\n",
        "operationId": "pairTerminal",
        "parameters": [
          {
            "name": "BusinessName",
            "in": "query",
            "description": "Business name",
            "type": "string",
            "required": true
          },
          {
            "name": "ContactName",
            "in": "query",
            "description": "Contact name",
            "type": "string",
            "required": true
          },
          {
            "name": "Address",
            "in": "query",
            "description": "Full address",
            "type": "string",
            "required": true
          },
          {
            "name": "City",
            "in": "query",
            "description": "City",
            "type": "string",
            "required": true
          },
          {
            "name": "State",
            "in": "query",
            "description": "State",
            "type": "string",
            "required": true
          },
          {
            "name": "ZipCode",
            "in": "query",
            "description": "Zip code",
            "type": "integer",
            "required": true
          },
          {
            "name": "Email",
            "in": "query",
            "description": "Email address",
            "type": "string",
            "required": true
          },
          {
            "name": "Phone",
            "in": "query",
            "description": "Phone number",
            "type": "string",
            "required": true
          },
          {
            "name": "ResellerName",
            "in": "query",
            "description": "Reseller name",
            "type": "string",
            "required": true
          },
          {
            "name": "ReferenceID",
            "in": "query",
            "description": "Reference ID",
            "type": "string",
            "required": true
          },
          {
            "name": "TerminalSerialNumber",
            "in": "query",
            "description": "Terminal serial number",
            "type": "integer",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/pairTerminal"
            }
          }
        }
      }
    },
    "/pairTerminalWithCountry": {
      "get": {
        "tags": [
          "Endpoints"
        ],
        "summary": "pairTerminalWithCountry",
        "description": "The pairTerminal method will return the APIkey, APIpwd and TerminalID that needs to be stored for later use when running a transaction.\n\nYour resellerName will be provided to you. The ReferenceID is a unique id that references the client on your end. If a client has multiple locations and you pass the same ReferenceID to us for all of them, we will link their terminals together. This makes it easy for customers to move terminals between their stores if needed.\n\nThe api will return a Success or Error status response. If it’s a Success, you would store the api key, pwd and terminal id with the register and use those credentials to make transaction calls.\n\nThe pairTerminalWithCountry method has one additional field \"Country\". If you know the country of the client, please use this method. Valid values are \"USA\",\"Canada\",\"UK\",\"Australia\",\"New Zealand\" \n\nReferenceID\n\nThe ReferenceID is a unique id that references the client/merchant/organization on your end. If a client has multiple devices and you pass the same ReferenceID for all of them, we will link their terminals together. The first time a client is directed to this page, they will be asked to confirm their contact information, once added to our system this page is no longer shown and we proceed to the terminal pairing process\n\nExample \n\nIf a client is boarded and they have 5 credit card terminals, and the same ReferenceID is provided, we will return the same ApiKey and ApiPassword for all 5 devices, the ReferenceID will be the same for all devices although the TerminalID will be unique for each device.\n\nOn the next boarding request a new ReferenceID should be provided for an new entity/business/organization and we will return a unique ApiKey, ApiPassword and TerminalID related to this ReferenceID.\n\n* It is NOT recommended or allowed to pass the same ReferenceID for all boarded accounts.\n",
        "operationId": "pairTerminalWithCountry",
        "parameters": [
          {
            "name": "BusinessName",
            "in": "query",
            "description": "Business name",
            "type": "string",
            "required": true
          },
          {
            "name": "ContactName",
            "in": "query",
            "description": "Contact name",
            "type": "string",
            "required": true
          },
          {
            "name": "Address",
            "in": "query",
            "description": "Full address",
            "type": "string",
            "required": true
          },
          {
            "name": "City",
            "in": "query",
            "description": "City",
            "type": "string",
            "required": true
          },
          {
            "name": "State",
            "in": "query",
            "description": "State",
            "type": "string",
            "required": true
          },
          {
            "name": "ZipCode",
            "in": "query",
            "description": "Zip code",
            "type": "integer",
            "required": true
          },
          {
            "name": "Email",
            "in": "query",
            "description": "Email address",
            "type": "string",
            "required": true
          },
          {
            "name": "Phone",
            "in": "query",
            "description": "Phone number",
            "type": "string",
            "required": true
          },
          {
            "name": "ResellerName",
            "in": "query",
            "description": "Reseller name",
            "type": "string",
            "required": true
          },
          {
            "name": "ReferenceID",
            "in": "query",
            "description": "Reference ID",
            "type": "string",
            "required": true
          },
          {
            "name": "TerminalSerialNumber",
            "in": "query",
            "description": "Terminal serial number",
            "type": "integer",
            "required": true
          },
          {
            "name": "Country",
            "in": "query",
            "description": "Country Code",
            "type": "integer",
            "required": true
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/pairTerminal"
            }
          }
        }
      }
    },
    "/runTransaction": {
      "get": {
        "summary": "runTransaction",
        "description": "You would use this method to run a transaction on the terminal. To run different types of transactions, change the command value in the request.  Valid command values\n\nSale, Refund, Auth, Capture, Void, TipAdjust, GiftActivate, GiftSale, GiftRefund, GiftAddValue, GiftBalance\n\n**In order to do a follow-up transaction (commands in italics), the batch needs to still be open and the RefId from the previous transaction needs to be sent instead of creating a new one. It is also recommended that you create a RefId value for all initial transactions as that will allow you to use the checkStatus() in the event of comm errors.**\n",
        "tags": [
          "Endpoints"
        ],
        "parameters": [
          {
            "name": "command",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "amount",
            "type": "number",
            "in": "query",
            "required": true
          },
          {
            "name": "refID",
            "type": "integer",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "produces": [
          "application/json;"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/runTransaction"
            },
            "examples": {
              "application/json": {
                "TerminalID": "1234",
                "ResultCode": "Approved",
                "AuthCode": "abc1234",
                "TransType": "Sale",
                "Amount": 2.5,
                "AmountString": "2.50",
                "CardType": "Visa",
                "Last4": "0026",
                "Name": "John Doe",
                "CashBack": 0,
                "CashBackString": "0.00",
                "Message": "This is a sample message",
                "RefID": "ee0252f6-38bf-4c3f-97d4-a3ecf87cf69b",
                "CardToken": "ASDF2134-AHRCW+FSD123123-NKODS",
                "GiftCardBalance": 23.75,
                "GiftCardBalanceString": "23.75",
                "ProcessorExtraData1": "KaNb015170105002706cAAFEd5e00fJlA m000005",
                "ProcessorExtraData2": "|17|210100700000",
                "ProcessorExtraData3": "0058",
                "SignatureData": "iVBORw0KGgoAAAANSUhEUgAAAI4AAAQmCC=",
                "Track1": "null",
                "Track2": "null",
                "EMV_TC": "B9AB420B0937438F",
                "EMV_TVR": "0800008000",
                "EMV_AID": "A0000000031010",
                "EMV_TSI": "F800",
                "EMV_ATC": "0016",
                "EMV_App_Label": "Visa Credit",
                "EMV_App_Name": "Visa Credit",
                "CardBin": "476173",
                "ExpDate": "0117",
                "EntryMethod": "Chip",
                "receiptTerminal": "Payroc",
                "Client ID": 13318900010001,
                "Cashier ID": null,
                "Lane": "123",
                "Store": "05/01/2015  16:56:25",
                "SALE": "123",
                "Invoice": 78,
                "Account": "VISA 401200******0026",
                "Cardholder": "TEST CARD   /VISA",
                "Result": "CAPTURED",
                "Authorization Code": 185
              }
            }
          }
        }
      }
    },
    "/runTransaction2": {
      "get": {
        "summary": "runTransaction2",
        "description": "You would use this method to run a transaction on the terminal. The method is the same as runTransaction with the exception of having some additional fields, the return object is the same.\n\ninvoiceNumber (When using Vantiv, this value will be sent to Vantiv)  merchantId (Used for Multi Mid applications, current only available in Dejavoo’s)  token – Supported on TSYS, FirstData RapidConnect and Vantiv. For Vantiv, the token can only be used a later date by integrating directly to the Vantiv gateway. For others, the token is run through the terminal. expDate – Needed when doing a token sale through TSYS or RapidConnect.\n\nNone of these fields are required to have a value but they all need to be in the request. Please note that the amount needs to include the decimal point.\n\n**Using Tokens on TSYS and RapidConnect.**\n\nIf tokenization is enabled in the terminal, Sale, Auth and Refund transactions will return a token and expiration date in the response. The token can be used to run a Sale, Auth or Refund at a later date without the card holder being present. TipAdjust, Capture and Void operate on the transaction level, which means that you are not using the token for these transactions but the RefId of the original transaction.\n\nTo run different types of transactions, change the command value in the request.  Valid command values\n\nSale, Refund, Auth, Capture, Void, TipAdjust, GiftActivate, GiftSale, GiftRefund, GiftAddValue, GiftBalance\n\n**In order to do a follow-up transaction (commands in italics), the batch needs to still be open and the RefId from the previous transaction needs to be sent instead of creating a new one. It is also recommended that you create a RefId value for all initial transactions as that will allow you to use the checkStatus() in the event of comm errors.**\n",
        "tags": [
          "Endpoints"
        ],
        "parameters": [
          {
            "name": "command",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "amount",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "refID",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "invoiceNumber",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "merchantId",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "token",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "expDate",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/runTransaction"
            },
            "examples": {
              "application/json": {
                "TerminalID": "1234",
                "ResultCode": "Approved",
                "AuthCode": "abc1234",
                "TransType": "Sale",
                "Amount": 2.5,
                "AmountString": "2.50",
                "CardType": "Visa",
                "Last4": "0026",
                "Name": "John Doe",
                "CashBack": 0,
                "CashBackString": "0.00",
                "Message": "This is a sample message",
                "RefID": "ee0252f6-38bf-4c3f-97d4-a3ecf87cf69b",
                "CardToken": "ASDF2134-AHRCW+FSD123123-NKODS",
                "GiftCardBalance": 23.75,
                "GiftCardBalanceString": "23.75",
                "ProcessorExtraData1": "KaNb015170105002706cAAFEd5e00fJlA m000005",
                "ProcessorExtraData2": "|17|210100700000",
                "ProcessorExtraData3": "0058",
                "SignatureData": "iVBORw0KGgoAAAANSUhEUgAAAI4AAAQmCC=",
                "Track1": "null",
                "Track2": "null",
                "EMV_TC": "B9AB420B0937438F",
                "EMV_TVR": "0800008000",
                "EMV_AID": "A0000000031010",
                "EMV_TSI": "F800",
                "EMV_ATC": "0016",
                "EMV_App_Label": "Visa Credit",
                "EMV_App_Name": "Visa Credit",
                "CardBin": "476173",
                "ExpDate": "0117",
                "EntryMethod": "Chip",
                "receiptTerminal": "Payroc",
                "Client ID": 13318900010001,
                "Cashier ID": null,
                "Lane": "123",
                "Store": "05/01/2015  16:56:25",
                "SALE": "123",
                "Invoice": 78,
                "Account": "VISA 401200******0026",
                "Cardholder": "TEST CARD   /VISA",
                "Result": "CAPTURED",
                "Authorization Code": 185
              }
            },
            "description": "Success"
          }
        }
      }
    },
    "/checkStatus": {
      "get": {
        "summary": "checkStatus",
        "description": "The checkStatus method will return the json transaction response to any transaction provided you know the RefId. It’s meant to be used when you don’t receive a response due to a network issue or browser crash.It is HIGHLY recommended to run a checkstatus PRIOR to allowing the next transaction to finalize or update any pending transactions if a response has not been received.\n\nAdditionally, we have added a flag to the response, ResultFinal, which indicates if the response you received is the end result. In cases of comm failures with the terminals, this value could be false. We recommend calling checkStatus at regular intervals when the ResultFinal flag is false. On some terminals, we are able to inspect the terminal to find out if the transaction was approved, provided it is back online. Please keep in mind that if the terminal is offline, the response won’t change and you probably don’t want to keep polling forever. If possible, it’s best to check every minute or so in the background so other functions can be done on the POS. **Do not constantly invoke the CheckStatus call in a continuous loop without pauses, this will cause alerts and your API credentials will be revoked. The max interval  is every 5 seconds for 3 minutes and every 30 seconds thereafter.**\n\nThe RefID for the original transaction must have been passed to us in the initial request in order to use this feature.\n\nCommand=Sale, Refund, Auth etc refID=refID of the transaction you are looking for the response on  date= date of the transaction in MMddYYYY format, ie. Jan 19, 2016 would be 01192016 – US Central tiimezone\n\nThe only reason to use checkStatus2 is if you are using multi-mid applications in the terminal. Nothing else is different for the 2 calls except that checkStatus2 accepts a merchantId value.\n",
        "parameters": [
          {
            "name": "command",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "refID",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "date",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "TerminalID": "1234",
                "ResultCode": "Approved",
                "AuthCode": "abc1234",
                "TransType": "checkStatus",
                "Amount": 2.5,
                "AmountString": "2.50",
                "CardType": "Visa",
                "Last4": "0026",
                "Name": "John Doe",
                "CashBack": 0,
                "CashBackString": "0.00",
                "Message": "This is a sample message",
                "RefID": "ee0252f6-38bf-4c3f-97d4-a3ecf87cf69b",
                "CardToken": "ASDF2134-AHRCW+FSD123123-NKODS",
                "GiftCardBalance": 23.75,
                "GiftCardBalanceString": "23.75",
                "ProcessorExtraData1": "KaNb015170105002706cAAFEd5e00fJlA m000005",
                "ProcessorExtraData2": "|17|210100700000",
                "ProcessorExtraData3": "0058",
                "SignatureData": "iVBORw0KGgoAAAANSUhEUgAAAI4AAA<snipped>QmCC=",
                "Track1": "null",
                "Track2": "null",
                "EMV_TC": "B9AB420B0937438F",
                "EMV_TVR": "0800008000",
                "EMV_AID": "A0000000031010",
                "EMV_TSI": "F800",
                "EMV_ATC": "0016",
                "EMV_App_Label": "Visa Credit",
                "EMV_App_Name": "Visa Credit",
                "CardBin": "476173",
                "ExpDate": "0117",
                "EntryMethod": "Chip",
                "receiptTerminal": "Payroc",
                "Client ID": 13318900010001,
                "Cashier ID": "123",
                "Lane": "Store: 05/01/2015 16:56:25",
                "SALE": "123",
                "Invoice": 78,
                "Account": "VISA 401200******0026",
                "Cardholder": "TEST CARD /VISA",
                "Result": "CAPTURED",
                "Authorization Code": 185
              }
            }
          }
        }
      }
    },
    "/checkStatus2": {
      "get": {
        "summary": "checkStatus",
        "description": "The checkStatus method will return the json transaction response to any transaction provided you know the RefId. It’s meant to be used when you don’t receive a response due to a network issue or browser crash.It is HIGHLY recommended to run a checkstatus PRIOR to allowing the next transaction to finalize or update any pending transactions if a response has not been received.\n\nAdditionally, we have added a flag to the response, ResultFinal, which indicates if the response you received is the end result. In cases of comm failures with the terminals, this value could be false. We recommend calling checkStatus at regular intervals when the ResultFinal flag is false. On some terminals, we are able to inspect the terminal to find out if the transaction was approved, provided it is back online. Please keep in mind that if the terminal is offline, the response won’t change and you probably don’t want to keep polling forever. If possible, it’s best to check every minute or so in the background so other functions can be done on the POS. **Do not constantly invoke the CheckStatus call in a continuous loop without pauses, this will cause alerts and your API credentials will be revoked. The max interval  is every 5 seconds for 3 minutes and every 30 seconds thereafter.**\n\nThe RefID for the original transaction must have been passed to us in the initial request in order to use this feature.\n\nCommand=Sale, Refund, Auth etc refID=refID of the transaction you are looking for the response on  date= date of the transaction in MMddYYYY format, ie. Jan 19, 2016 would be 01192016 – US Central tiimezone\n\nThe only reason to use checkStatus2 is if you are using multi-mid applications in the terminal. Nothing else is different for the 2 calls except that checkStatus2 accepts a merchantId value.\n",
        "parameters": [
          {
            "name": "command",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "refID",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "date",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "merchantID",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "TerminalID": "1234",
                "ResultCode": "Approved",
                "AuthCode": "abc1234",
                "TransType": "checkStatus",
                "Amount": 2.5,
                "AmountString": "2.50",
                "CardType": "Visa",
                "Last4": "0026",
                "Name": "John Doe",
                "CashBack": 0,
                "CashBackString": "0.00",
                "Message": "This is a sample message",
                "RefID": "ee0252f6-38bf-4c3f-97d4-a3ecf87cf69b",
                "CardToken": "ASDF2134-AHRCW+FSD123123-NKODS",
                "GiftCardBalance": 23.75,
                "GiftCardBalanceString": "23.75",
                "ProcessorExtraData1": "KaNb015170105002706cAAFEd5e00fJlA m000005",
                "ProcessorExtraData2": "|17|210100700000",
                "ProcessorExtraData3": "0058",
                "SignatureData": "iVBORw0KGgoAAAANSUhEUgAAAI4AAA<snipped>QmCC=",
                "Track1": "null",
                "Track2": "null",
                "EMV_TC": "B9AB420B0937438F",
                "EMV_TVR": "0800008000",
                "EMV_AID": "A0000000031010",
                "EMV_TSI": "F800",
                "EMV_ATC": "0016",
                "EMV_App_Label": "Visa Credit",
                "EMV_App_Name": "Visa Credit",
                "CardBin": "476173",
                "ExpDate": "0117",
                "EntryMethod": "Chip",
                "receiptTerminal": "Payroc",
                "Client ID": 13318900010001,
                "Cashier ID": "123",
                "Lane": "Store: 05/01/2015 16:56:25",
                "SALE": "123",
                "Invoice": 78,
                "Account": "VISA 401200******0026",
                "Cardholder": "TEST CARD /VISA",
                "Result": "CAPTURED",
                "Authorization Code": 185
              }
            }
          }
        }
      }
    },
    "/closeBatch": {
      "get": {
        "summary": "closeBatch",
        "description": "This method will attempt to settle the open batch in the terminal. Both the credit and gift batches are settled at the same time, you cannot settle them independently. Possible response codes\n\n* 1 – Batch close is not supported on the terminal \n* 0 – Batch closed failed, the message field will contain the reason is available. \n* 1 – Success – A batch with zero transactions usually returns a success code\n\nThe response fields with total will have the combined amounts of both the credit and gift batches.\n",
        "tags": [
          "Endpoints"
        ],
        "parameters": [
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "refID",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "merchantId",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "TerminalID": 1372,
                "RefID": "3423",
                "ResultCodeCredit": "1",
                "ResultCodeGift": "1",
                "MessageCredit": "APPROVED",
                "MessageGift": "Settled",
                "BatchNumCredit": "110",
                "BatchNumGift": "4",
                "TransCntTotal": 1,
                "AmtTotal": 2.02,
                "AmtTotalString": "2.02",
                "TransCntCredit": 1,
                "AmtCredit": 2.02,
                "AmtCreditString": "2.02",
                "TransCntGift": 0,
                "AmtGift": 0,
                "AmtGiftString": "0"
              }
            }
          }
        }
      }
    },
    "/getSignature": {
      "get": {
        "summary": "getSignature",
        "description": "The getSignature method will initiate a signature capture on the terminal without the need for a transaction. This is useful for when a signature is needed outside of a payment situation. Possibly for a work order or some other authorization where just a signature is required.\n\nThis method is only supported on Pax and Dejavoo terminals which have a touchscreen and have been updated to a firmware that supports.\n\nThis method will return our standard transaction object which will have the signatureData field populated with a base64 encoded png file.\n\n**(This method is not necessary for normal payment transactions as that happens automatically)**\n",
        "tags": [
          "Endpoints"
        ],
        "parameters": [
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "TerminalID": 1372,
                "ResultFinal": true,
                "AuthCode": "",
                "TransType": "getSignature",
                "Amount\"": "0,",
                "AmountString": null,
                "CardType": null,
                "Last4": null,
                "Name": null,
                "CashBack": 0,
                "CashBackString": null,
                "RefID": "",
                "receiptTerminal": null,
                "CardToken": "",
                "GiftCardBalance": 0,
                "GiftCardBalanceString": null,
                "ProcessorExtraData1": null,
                "ProcessorExtraData2": null,
                "ProcessorExtraData3": null,
                "SignatureData": "iVBORw0KGgoAAAANSUhEUgAAALoAAAB3AQMAAACOtsjYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAGUExURQAAAP///6XZn90AAAAJcEhZcwAADsQAAA7EAZUrDhsAAALJSURBVEjHjZY7kt4gDIDlceHSR/BRnJtBqlyLzBa5Bju5ANtRMBCJhxBeeSZ/89v+QG8k4KuoPwfhFVwvIO4vIMELKPZ+AeF4AWl7AQXMC/DXC1ANJpDhBTwNhmuAcC7fAe4OFoMdgq2DAlNWwvUW3xtwU5anRXB2EKcsoDXoQANTVuzvA7As1yLqTAfD+dy3hgFK//NdWWLg7ql6Ac35NDKQ7gFSVcLJnKApccPqPEH9xvEXgJSkXQH0cYZf6CAxM2ESuFukOJoJwimKQoJ0iDIKZYKyWaMDJzL/KYE//gN8SGCFqF2AvFn+ng8B4uHZ8XgK4K/IfoRbAGfSOZ8F+Ekq5zMD1Efvw6gJSI4z4nkA0hy6WdRFGHhTrWy6bwFc11P6mWRQFbeg1IQxOMa2XvoD5Cq+BaXWKZfoNUzrR3WAWNcmEtiqi6u9+VbV3gtof5SSfvg6+GI3e3UN8MnB8KcGMHz9eA7wt7uzj17wAMXao2ii8P3WARfXw9wAxwM0ByNs2xOYuh6ucRZkELHp7dyERdh97YXxYW4+Eq2fTZhTu9neeewakmKHoY8gYhvuD2kNewAu9dazuPUBl7qTOQ9wzxYhqwTXzyYm6go3iBlWe29v+rscCZGLOtXswCKrDZadPctE/b2MokgLa3GPozbiRpoqoAMkx52jQVO929YBmXE61YlWXGsy3NkwtS1QHnYEWcyhHkpM2g/gZMof7dVnMJJitamNwoo653FH1m4GGZVHXQVeWLRLhkM/gqYbsOl/ajZRSDTgqL1+KBvqPFcARdbBH2VDzeAvdYMG6gYEp7pBARFOHdjRrx7BHQflqTwDd5/VQQ98zn+vG3a2zZvFVMNPMlFpmoI3y1OaaibIu9B8CqHzBhEApDY+rhHgWkAYc2YJAl05q8YkekMHhZY6gLVU64mC+jPfQD1iz9tlS5f/lpXi/gHRf6dGMoClVAAAAABJRU5ErkJggg==",
                "Track1": null,
                "Track2": null,
                "EMV_TC": null,
                "EMV_TVR": null,
                "EMV_AID": null,
                "EMV_TSI": null,
                "EMV_ATC": null,
                "EMV_App_Label": null,
                "EMV_App_Name": null,
                "EMV_ARC": null,
                "EMV_CVM": -1,
                "CardBin": null,
                "EntryMethod": null,
                "PaymentMethod": "Credit",
                "TransactionDate": "2017-05-19T14:16:34-05:00",
                "TransactionDateUtc": "2017-05-19T19:16:34Z",
                "InvoiceNumber": null,
                "ExpDate": null,
                "GiftPAN": null,
                "ResultCode": null,
                "Message": "OK"
              }
            }
          }
        }
      }
    },
    "/getSwipe": {
      "get": {
        "summary": "getSwipe",
        "description": "The getSwipe method allows you to use the terminal much like an MSR reader. This can be used if you need to swipe an admin card to log in a user or for your own gift card platform where you just need to the gift card number.\n\nThe prompt parameter is what is displayed on the terminal to prompt the user to swipe. While the command accepts any amount of characters, the display on the terminal is limited to 3 lines and it will break on spaces.\n\nIf a user manually enters a card number, then only the track1 field will return data. Be sure to test both swiping and manually entering as some cards will return data on track2 only and not track1.\n\n**We cannot prevent users from swiping real credit cards when using this method. Use of the method should only be done with care since we will return a live credit card number if the user swipes a live credit card. This will open you up to PCI regulations.**\n",
        "tags": [
          "Endpoints"
        ],
        "parameters": [
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "prompt",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Sucess",
            "examples": {
              "application/json": {
                "TerminalID": 1372,
                "ResultFinal": true,
                "AuthCode": null,
                "TransType": "getswipe",
                "Amount": 0,
                "AmountString": null,
                "CardType": null,
                "Last4": null,
                "Name": null,
                "CashBack": 0,
                "CashBackString": null,
                "RefID": null,
                "receiptTerminal": null,
                "CardToken": null,
                "GiftCardBalance": 0,
                "GiftCardBalanceString": null,
                "ProcessorExtraData1": null,
                "ProcessorExtraData2": null,
                "ProcessorExtraData3": null,
                "SignatureData": null,
                "Track1": "%B4XXXXXXXXXXXX2-BS6DLR-QD55?",
                "Track2": ";1582300193255026?",
                "EMV_TC": null,
                "EMV_TVR": null,
                "EMV_AID": null,
                "EMV_TSI": null,
                "EMV_ATC": null,
                "EMV_App_Label": null,
                "EMV_App_Name": null,
                "EMV_ARC": null,
                "EMV_CVM": -1,
                "CardBin": null,
                "EntryMethod": null,
                "PaymentMethod": null,
                "TransactionDate": "2017-05-19T14:12:06-05:00",
                "TransactionDateUtc": "2017-05-19T19:12:06Z",
                "InvoiceNumber": null,
                "ExpDate": null,
                "GiftPAN": null,
                "ResultCode": "Success",
                "Message": null
              }
            }
          }
        }
      }
    },
    "/unpairTerminal": {
      "get": {
        "summary": "unpairTerminal",
        "description": "The unPairTerminal method clears the pairing information for the terminal so that it can be paired to a different client account. Typically this is only used for development.\n",
        "parameters": [
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "tags": [
          "Endpoints"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "TerminalID": 1,
                "ApiKey": "",
                "ApiPassword": "",
                "Status": "Success",
                "ErrorMessage": null
              }
            }
          }
        }
      }
    },
    "/getUserInput": {
      "get": {
        "summary": "getUserInput",
        "description": "This method will prompt the user in front of a terminal to enter some information. The “Title” field is used as the prompt, i.e., Enter the tip amount or enter your phone number.  On Pax devices, the value of the title field has to match predefined options specified by Pax. Please contact us for a current list.\n\nThe type is the allowed entry characters\n\n* c=currency (Response will NOT have a decimal place included) \n* n=numeric only \n* a=alpha only \n* an=alphanumeric\n* maxlength=number of characters to limit the user entry to\n",
        "tags": [
          "Endpoints"
        ],
        "parameters": [
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "title",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "type",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "maxLength",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "TerminalID": 1082,
                "UserInput": "200",
                "ResultCode": "Success",
                "Message": "Success"
              }
            }
          }
        }
      }
    },
    "/getUserSelection": {
      "get": {
        "summary": "getUserSelection",
        "description": "This method will allow the user to pick from a list of predefined options. For Example, \nWould you like to join our loyalty program or Would you like to add a tip? \n\n* Yes \n* No\n\nOn Dejavoo’s, if the list of options is too long, the user can scroll up and down. On Pax, only the first 4 options are shown.\n",
        "tags": [
          "Endpoints"
        ],
        "parameters": [
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "title",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "options",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "TerminalID": 1082,
                "UserInput": "Yes",
                "ResultCode": "Success",
                "Message": "Success"
              }
            }
          }
        }
      }
    },
    "/setTerminalConfiguration": {
      "get": {
        "summary": "setTerminalConfiguration",
        "description": "Some terminals allow for additional features to be enabled or disabled based on the terminal type. For instance, on Dejavoo terminals, you can enable a credit debit prompt.\n\nNot all parameters are valid on all terminals and this list will expand as capabilities are added.\n\n**Dejavoo**\n\nEnableCreditDebitPrompt (True or False) Will prompt the user to select credit or debit\n\n**Pax**\n\nPaxGetSignature (True or False) – Will prompt for a signature after an approved transaction and add the result to the transaction response.\n\n**All Terminals**\n\nWebHookUrl – This is not publicly available yet.\n",
        "tags": [
          "Endpoints"
        ],
        "parameters": [
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "optionName",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "optionValue",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "ResultCode": "Success",
                "Message": "Operation has been done successfully"
              }
            }
          }
        }
      }
    },
    "/getTerminalConfiguration": {
      "get": {
        "summary": "getTerminalConfiguration",
        "description": "This method will return the current values for any parameters that have been set using the setTerminalConfiguration method.",
        "tags": [
          "Endpoints"
        ],
        "parameters": [
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "ResultCode": "Success",
                "Message": "",
                "TerminalParameters": [
                  {
                    "Name": "EnableCreditDebitPrompt",
                    "Value": "True",
                    "DataType": "boolean"
                  },
                  {
                    "Name": "WebHookUrl",
                    "Value": "http://xxx.com/WebhookTester",
                    "DataType": "string"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/getTerminalFeatures": {
      "get": {
        "summary": "getTerminalFeatures",
        "description": "This method will allow you to determine what features are available on the terminal. Some terminals do not support signature capture, batch closing, getSwipe etc. By using this method, you can dynamically hide those features so they are not shown to end users when they are not applicable.\n",
        "tags": [
          "Endpoints"
        ],
        "parameters": [
          {
            "name": "key",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "password",
            "type": "string",
            "in": "query",
            "required": true
          },
          {
            "name": "terminalId",
            "type": "string",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "examples": {
              "application/json": {
                "TerminalID": 1372,
                "TerminalType": "Dejavoo",
                "TerminalModel": "",
                "Sale": true,
                "Refund": true,
                "Void": true,
                "TipAdjust": true,
                "Auth": true,
                "Capture": true,
                "GetSwipe": true,
                "GiftActivate": true,
                "GiftSale": true,
                "GiftRefund": true,
                "GiftAddValue": true,
                "GiftBalance": true,
                "GiftVoid": true,
                "GetUserInput": true,
                "GetUserSelection": true,
                "GetIndependentSignature": true,
                "BatchClose": true
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "pairTerminal": {
      "type": "object",
      "description": "standard transaction response fields",
      "properties": {
        "TerminalID": {
          "type": "integer"
        },
        "ApiKey": {
          "type": "string"
        },
        "ApiPassword": {
          "type": "string"
        },
        "Status": {
          "type": "string"
        }
      }
    },
    "runTransaction": {
      "type": "object",
      "description": "runTransaction object result",
      "properties": {
        "TerminalID": {
          "type": "string"
        },
        "ResultCode": {
          "type": "string"
        },
        "AuthCode": {
          "type": "string"
        },
        "TransType": {
          "type": "string"
        },
        "Amount": {
          "type": "number"
        },
        "AmountString": {
          "type": "string"
        },
        "CardType": {
          "type": "string"
        },
        "Last4": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "CashBack": {
          "type": "number"
        },
        "CashBackString": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        },
        "RefID": {
          "type": "string"
        },
        "CardToken": {
          "type": "string"
        },
        "GiftCardBalance": {
          "type": "number"
        },
        "GiftCardBalanceString": {
          "type": "string"
        },
        "ProcessorExtraData1": {
          "type": "string"
        },
        "ProcessorExtraData2": {
          "type": "string"
        },
        "ProcessorExtraData3": {
          "type": "string"
        },
        "SignatureData": {
          "type": "string"
        },
        "Track1": {
          "type": "string"
        },
        "Track2": {
          "type": "string"
        },
        "EMV_TC": {
          "type": "string"
        },
        "EMV_TVR": {
          "type": "string"
        },
        "EMV_AID": {
          "type": "string"
        },
        "EMV_TSI": {
          "type": "string"
        },
        "EMV_ATC": {
          "type": "string"
        },
        "EMV_App_Label": {
          "type": "string"
        },
        "EMV_App_Name": {
          "type": "string"
        },
        "CardBin": {
          "type": "string"
        },
        "ExpDate": {
          "type": "string"
        },
        "EntryMethod": {
          "type": "string"
        },
        "receiptTerminal": {
          "type": "string"
        },
        "Client ID": {
          "type": "integer"
        },
        "Cashier ID": {
          "type": "string"
        },
        "Lane": {
          "type": "string"
        },
        "Store": {
          "type": "string"
        },
        "SALE": {
          "type": "string"
        },
        "Invoice": {
          "type": "integer"
        },
        "Account": {
          "type": "string"
        },
        "Cardholder": {
          "type": "string"
        },
        "Result": {
          "type": "string"
        },
        "Authorization Code": {
          "type": "integer"
        },
        "description": {
          "type": "string"
        }
      }
    }
  }
}
