# This is an **example** API to demontstrate features of OpenAPI specification.
# It doesn't cover all OpenAPI features. For more full example check out: https://github.com/APIs-guru/petstore_extended
swagger: '2.0'
# You should specify common part of your endpoints in the following format:
#   <schemes>://<host><basepath>
schemes:
  #- http # Remove if your API doesn't support HTTP
  - https # Remove if your API donsn't support HTTPS
host: emv.payroc.com # Replace with your hostname. You can also specify port e.g. example.com:777
basePath: /services/api.asmx/ # Replace with your basePath. Note: SHOULD begin with '/'.
info:
  # Describe your API here, you can use GFM (https://guides.github.com/features/mastering-markdown) here
  description: |
    # Introduction
    In order to start testing, please [contact](mailto:integrations@payroc.com) us to obtain a reseller id.  Once you have the reseller id you would first call the **pairTerminal()** method of the api which will return an API Key/Pwd and terminalID which you would store on your end. You would then use those credentials with the runTransaction method to run a sale. Please be sure to read the area in red on the pairing page as it describes the importance of the referenceID when calling the pairTerminal method. 
    
    All commands require a key, pwd and terminalID parameter which is obtained from the pairTerminal method
  version: '1.0.0' # Your API version
  # It can be any string but it is better to use semantic versioning: http://semver.org/
  # Warning: OpenAPI require version to be string, but without quotation YAML can recognize it as number.

  title: Point of Sale - REST API # Replace with your API title
  # Keep it simple. Don't add "API" or verison at the end of the string.
  termsOfService: 'https://www.payroc.com/privacy-policy' # [Optional] Replace with an URL to your ToS
  contact:
    email: integrations@payroc.com # [Optional] Replace with your contact email
    url: 'https://www.payroc.com/contact-us' # [Optional] Replace with link to your contact form
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: 'https://s3-us-west-2.amazonaws.com/payroc-production/Public/payroc-logo-outlines.svg'
#externalDocs:
  #description: Find out how to create Github repo for your OpenAPI spec.
  #url: 'https://github.com/Rebilly/generator-openapi-repo'
produces:
  # List of mime types your API endpoins can return.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not used in your API
  - application/json
  #- application/xml
  #- text/csv
  # you can add any mime type your API produces to the list
consumes:
  # List of mime types your API endpoins consumes.
  # This is a global default. You can OVERWRITE it in each specific operation.
  # Remove the ones not supported by your API
  - application/json
  #- application/xml
  # you can add any mime type your API consumes to the list
# A list of tags used by the specification with additional metadata.
# The order of the tags can be used to reflect on their order by the parsing tools.

# Holds the relative paths to the individual endpoints. The path is appended to the
# basePath in order to construct the full URL.
paths:
  '/pairTerminal':
    get:
      tags:
      - Endpoints
      # summary is up to 120 symbold but we recommend to be shortest as possible
      summary: pairTerminal
      # you can use GFM in operation description too: https://guides.github.com/features/mastering-markdown
      description: | 
        The pairTerminal method will return the APIkey, APIpwd and TerminalID that needs to be stored for later use when running a transaction.
        
        Your resellerName will be provided to you. The ReferenceID is a unique id that references the client on your end. If a client has multiple locations and you pass the same ReferenceID to us for all of them, we will link their terminals together. This makes it easy for customers to move terminals between their stores if needed.
        
        The api will return a Success or Error status response. If it’s a Success, you would store the api key, pwd and terminal id with the register and use those credentials to make transaction calls.
        
        The pairTerminalWithCountry method has one additional field "Country". If you know the country of the client, please use this method. Valid values are "USA","Canada","UK","Australia","New Zealand" 
        
        ReferenceID
        
        The ReferenceID is a unique id that references the client/merchant/organization on your end. If a client has multiple devices and you pass the same ReferenceID for all of them, we will link their terminals together. The first time a client is directed to this page, they will be asked to confirm their contact information, once added to our system this page is no longer shown and we proceed to the terminal pairing process
        
        Example 
        
        If a client is boarded and they have 5 credit card terminals, and the same ReferenceID is provided, we will return the same ApiKey and ApiPassword for all 5 devices, the ReferenceID will be the same for all devices although the TerminalID will be unique for each device.
        
        On the next boarding request a new ReferenceID should be provided for an new entity/business/organization and we will return a unique ApiKey, ApiPassword and TerminalID related to this ReferenceID.
        
        * It is NOT recommended or allowed to pass the same ReferenceID for all boarded accounts.
      
      # operationId should be unique across the whole specification
      operationId: pairTerminal
      # list of parameters for the operation
      parameters:
        - name: BusinessName
          in: query
          description: Business name
          type: string
          required: true
        - name: ContactName
          in: query
          description: Contact name
          type: string
          required: true
        - name: Address
          in: query
          description: Full address
          type: string
          required: true
        - name: City
          in: query
          description: City
          type: string
          required: true
        - name: State
          in: query
          description: State
          type: string
          required: true
        - name: ZipCode
          in: query
          description: Zip code
          type: integer
          required: true
        - name: Email
          in: query
          description: Email address
          type: string
          required: true
        - name: Phone
          in: query
          description: Phone number
          type: string
          required: true
        - name: ResellerName
          in: query
          description: Reseller name
          type: string
          required: true
        - name: ReferenceID
          in: query
          description: Reference ID
          type: string
          required: true
        - name: TerminalSerialNumber
          in: query
          description: Terminal serial number
          type: integer
          required: true
      produces:
        - application/json
      responses: # list of responses
        '200':
          description: Success
          schema:
            $ref: '#/definitions/pairTerminal'
  '/pairTerminalWithCountry':
    get:
      tags:
      - Endpoints
      # summary is up to 120 symbold but we recommend to be shortest as possible
      summary: pairTerminalWithCountry
      # you can use GFM in operation description too: https://guides.github.com/features/mastering-markdown
      description: | 
        The pairTerminal method will return the APIkey, APIpwd and TerminalID that needs to be stored for later use when running a transaction.
        
        Your resellerName will be provided to you. The ReferenceID is a unique id that references the client on your end. If a client has multiple locations and you pass the same ReferenceID to us for all of them, we will link their terminals together. This makes it easy for customers to move terminals between their stores if needed.
        
        The api will return a Success or Error status response. If it’s a Success, you would store the api key, pwd and terminal id with the register and use those credentials to make transaction calls.
        
        The pairTerminalWithCountry method has one additional field "Country". If you know the country of the client, please use this method. Valid values are "USA","Canada","UK","Australia","New Zealand" 
        
        ReferenceID
        
        The ReferenceID is a unique id that references the client/merchant/organization on your end. If a client has multiple devices and you pass the same ReferenceID for all of them, we will link their terminals together. The first time a client is directed to this page, they will be asked to confirm their contact information, once added to our system this page is no longer shown and we proceed to the terminal pairing process
        
        Example 
        
        If a client is boarded and they have 5 credit card terminals, and the same ReferenceID is provided, we will return the same ApiKey and ApiPassword for all 5 devices, the ReferenceID will be the same for all devices although the TerminalID will be unique for each device.
        
        On the next boarding request a new ReferenceID should be provided for an new entity/business/organization and we will return a unique ApiKey, ApiPassword and TerminalID related to this ReferenceID.
        
        * It is NOT recommended or allowed to pass the same ReferenceID for all boarded accounts.
      
      # operationId should be unique across the whole specification
      operationId: pairTerminalWithCountry
      # list of parameters for the operation
      parameters:
        - name: BusinessName
          in: query
          description: Business name
          type: string
          required: true
        - name: ContactName
          in: query
          description: Contact name
          type: string
          required: true
        - name: Address
          in: query
          description: Full address
          type: string
          required: true
        - name: City
          in: query
          description: City
          type: string
          required: true
        - name: State
          in: query
          description: State
          type: string
          required: true
        - name: ZipCode
          in: query
          description: Zip code
          type: integer
          required: true
        - name: Email
          in: query
          description: Email address
          type: string
          required: true
        - name: Phone
          in: query
          description: Phone number
          type: string
          required: true
        - name: ResellerName
          in: query
          description: Reseller name
          type: string
          required: true
        - name: ReferenceID
          in: query
          description: Reference ID
          type: string
          required: true
        - name: TerminalSerialNumber
          in: query
          description: Terminal serial number
          type: integer
          required: true
        - name: Country
          in: query
          description: Country Code
          type: integer
          required: true
      produces:
        - application/json
      responses: # list of responses
        '200':
          description: Success
          schema:
            $ref: '#/definitions/pairTerminal'
  '/runTransactions':
    get:
      summary: runTransactions
      # you can use GFM in operation description too: https://guides.github.com/features/mastering-markdown
      description: | 
        You would use this method to run a transaction on the terminal. To run different types of transactions, change the command value in the request.  Valid command values
        
        Sale, Refund, Auth, Capture, Void, TipAdjust, GiftActivate, GiftSale, GiftRefund, GiftAddValue, GiftBalance
        
        **In order to do a follow-up transaction (commands in italics), the batch needs to still be open and the RefId from the previous transaction needs to be sent instead of creating a new one. It is also recommended that you create a RefId value for all initial transactions as that will allow you to use the checkStatus() in the event of comm errors.**
      
      # operationId should be unique across the whole specification
      tags:
        - Endpoints
      parameters:
        - name: command
          type: string
          in: query
          required: true
        - name: key
          type: string
          in: query
          required: true
        - name: password
          type: string
          in: query
          required: true
        - name: amount
          type: number
          in: query
          required: true
        - name: refID
          type: integer
          in: query
          required: true
        - name: terminalId
          type: string
          in: query
          required: true
      produces:
      - application/json;
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/runTransaction'
          examples:
            application/json:
              TerminalID: "1234"
              ResultCode: "Approved"
              AuthCode: "abc1234"
              TransType: "Sale"
              Amount: 2.50
              AmountString: "2.50"
              CardType: "Visa"
              Last4: "0026"
              Name: "John Doe"
              CashBack: 0.00
              CashBackString: "0.00"
              Message: "This is a sample message"
              RefID: "ee0252f6-38bf-4c3f-97d4-a3ecf87cf69b"
              CardToken: "ASDF2134-AHRCW+FSD123123-NKODS"
              GiftCardBalance: 23.75
              GiftCardBalanceString: "23.75"
              ProcessorExtraData1: "KaNb015170105002706cAAFEd5e00fJlA m000005"
              ProcessorExtraData2: "|17|210100700000"
              ProcessorExtraData3: "0058"
              SignatureData: "iVBORw0KGgoAAAANSUhEUgAAAI4AAAQmCC="
              Track1: "null"  
              Track2: "null"
              EMV_TC: "B9AB420B0937438F"
              EMV_TVR: "0800008000"
              EMV_AID: "A0000000031010"
              EMV_TSI: "F800"
              EMV_ATC: "0016"
              EMV_App_Label: "Visa Credit"
              EMV_App_Name: "Visa Credit"
              CardBin: "476173"
              ExpDate: "0117"
              EntryMethod: "Chip"
              receiptTerminal: "Payroc"
              Client ID:  13318900010001
              Cashier ID: 
              Lane: "123"                           
              Store: "05/01/2015  16:56:25"
              SALE: "123"
              Invoice: 78
              Account:  "VISA 401200******0026"
              Cardholder:  "TEST CARD   /VISA"
              Result:  "CAPTURED"
              Authorization Code:  000271
  '/runTransaction2':
    get:
      summary: runTransaction2
      description:  | 
        You would use this method to run a transaction on the terminal. The method is the same as runTransaction with the exception of having some additional fields, the return object is the same.
        
        invoiceNumber (When using Vantiv, this value will be sent to Vantiv)  merchantId (Used for Multi Mid applications, current only available in Dejavoo’s)  token – Supported on TSYS, FirstData RapidConnect and Vantiv. For Vantiv, the token can only be used a later date by integrating directly to the Vantiv gateway. For others, the token is run through the terminal. expDate – Needed when doing a token sale through TSYS or RapidConnect.
      
        None of these fields are required to have a value but they all need to be in the request. Please note that the amount needs to include the decimal point.
      
        **Using Tokens on TSYS and RapidConnect.**
      
        If tokenization is enabled in the terminal, Sale, Auth and Refund transactions will return a token and expiration date in the response. The token can be used to run a Sale, Auth or Refund at a later date without the card holder being present. TipAdjust, Capture and Void operate on the transaction level, which means that you are not using the token for these transactions but the RefId of the original transaction.
      
        To run different types of transactions, change the command value in the request.  Valid command values
      
        Sale, Refund, Auth, Capture, Void, TipAdjust, GiftActivate, GiftSale, GiftRefund, GiftAddValue, GiftBalance
      
        **In order to do a follow-up transaction (commands in italics), the batch needs to still be open and the RefId from the previous transaction needs to be sent instead of creating a new one. It is also recommended that you create a RefId value for all initial transactions as that will allow you to use the checkStatus() in the event of comm errors.**
      
      tags:
        - Endpoints
      parameters:
        - name: command
          type: string
          in: query
          required: true
        - name: key
          type: string
          in: query
          required: true
        - name: password
          type: string
          in: query
          required: true
        - name: amount
          type: string
          in: query
          required: true
        - name: refID
          type: string
          in: query
          required: true
        - name: terminalId
          type: string
          in: query
          required: true
        - name: invoiceNumber
          type: string
          in: query
          required: true
        - name: merchantId
          type: string
          in: query
          required: true
        - name: token
          type: string
          in: query
          required: true
        - name: expDate
          type: string
          in: query
          required: true
      responses:
        200:
          schema:
            $ref: '#/definitions/runTransaction'
          examples:
            application/json:
              TerminalID: "1234"
              ResultCode: "Approved"
              AuthCode: "abc1234"
              TransType: "Sale"
              Amount: 2.50
              AmountString: "2.50"
              CardType: "Visa"
              Last4: "0026"
              Name: "John Doe"
              CashBack: 0.00
              CashBackString: "0.00"
              Message: "This is a sample message"
              RefID: "ee0252f6-38bf-4c3f-97d4-a3ecf87cf69b"
              CardToken: "ASDF2134-AHRCW+FSD123123-NKODS"
              GiftCardBalance: 23.75
              GiftCardBalanceString: "23.75"
              ProcessorExtraData1: "KaNb015170105002706cAAFEd5e00fJlA m000005"
              ProcessorExtraData2: "|17|210100700000"
              ProcessorExtraData3: "0058"
              SignatureData: "iVBORw0KGgoAAAANSUhEUgAAAI4AAAQmCC="
              Track1: "null"  
              Track2: "null"
              EMV_TC: "B9AB420B0937438F"
              EMV_TVR: "0800008000"
              EMV_AID: "A0000000031010"
              EMV_TSI: "F800"
              EMV_ATC: "0016"
              EMV_App_Label: "Visa Credit"
              EMV_App_Name: "Visa Credit"
              CardBin: "476173"
              ExpDate: "0117"
              EntryMethod: "Chip"
              receiptTerminal: "Payroc"
              Client ID:  13318900010001
              Cashier ID: 
              Lane: "123"                           
              Store: "05/01/2015  16:56:25"
              SALE: "123"
              Invoice: 78
              Account:  "VISA 401200******0026"
              Cardholder:  "TEST CARD   /VISA"
              Result:  "CAPTURED"
              Authorization Code:  000271
              description: "OK"
          description: Success
    
    
## models definition           
definitions:
  pairTerminal:
      type: object
      description: standard transaction response fields
      properties:
          TerminalID:
            type: integer
          ApiKey:
            type: string
          ApiPassword:
            type: string
          Status:
            type: string
            
  runTransaction:
    type: object
    description: runTransaction object result
    properties:
        TerminalID:
          type: string
        ResultCode:
          type: string
        AuthCode:
          type: string
        TransType:
          type: string
        Amount: 
          type: number
        AmountString: 
          type: string
        CardType:
          type: string
        Last4: 
          type: string
        Name:
          type: string
        CashBack:
          type: number
        CashBackString:
          type: string
        Message:
          type: string
        RefID:
          type: string
        CardToken:
          type: string
        GiftCardBalance:
          type: number
        GiftCardBalanceString:
          type: string
        ProcessorExtraData1:
          type: string
        ProcessorExtraData2:
          type: string
        ProcessorExtraData3:
          type: string
        SignatureData:
          type: string
        Track1:
          type: string
        Track2:
          type: string
        EMV_TC:
          type: string
        EMV_TVR:
          type: string
        EMV_AID:
          type: string
        EMV_TSI:
          type: string
        EMV_ATC:
          type: string
        EMV_App_Label:
          type: string
        EMV_App_Name:
          type: string
        CardBin:
          type: string
        ExpDate:
          type: string
        EntryMethod:
          type: string
        receiptTerminal:
          type: string
        Client ID:
          type: integer
        Cashier ID:
          type: string
        Lane:
          type: string
        Store:
          type: string
        SALE:
          type: string
        Invoice:
          type: integer
        Account:
          type: string
        Cardholder:
          type: string
        Result:
          type: string
        Authorization Code:
          type: integer
        description:
          type: string
      
